nits_tab = t(all_data[(all_data$Costo.de.ventas %in% bxplot_costos$out),]$NIT)
rownames(nits_tab) <- c("NITs")
kable(nits_tab)%>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center", fixed_thead = T)%>%
column_spec(1,bold=T)
### Outliers para gastos
nits_tab = t(all_data[(all_data$Gastos.de.ventas %in% bxplot_gastos$out),]$NIT)
rownames(nits_tab) <- c("NITs")
kable(nits_tab)%>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center", fixed_thead = T)%>%
column_spec(1,bold=T)
par(mfrow=c(1,2))
bxplot_costos_dif = boxplot(Costo.de.ventas_dif~Year, data = all_data)
bxplot_gastos_dif = boxplot(Gastos.de.ventas_dif~Year, data = all_data)
### Outliers para costos dif
nits_tab = t(all_data[(all_data$Costo.de.ventas_dif %in% bxplot_costos_dif$out),]$NIT)
rownames(nits_tab) <- c("NITs")
kable(nits_tab)%>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center", fixed_thead = T)%>%
column_spec(1,bold=T)
### Outliers para gastos dif
nits_tab = t(all_data[(all_data$Gastos.de.ventas_dif %in% bxplot_gastos_dif$out),]$NIT)
rownames(nits_tab) <- c("NITs")
kable(nits_tab)%>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center", fixed_thead = T)%>%
column_spec(1,bold=T)
cov_data = cov(data)
kable(formatC(cov_data,format = "e", digits = 2)) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center", fixed_thead = T)%>%
scroll_box("100%", height = "480px")
cor_data = cor(data)
kable(round(cor_data,2)) %>%
kable_styling(bootstrap_options = "striped", full_width = F, position = "center", fixed_thead = T)%>%
scroll_box("100%", height = "480px")
corrplot(cor_data, method="circle")
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
panel.hist <- function(x, ...)
{
usr <- par("usr"); on.exit(par(usr))
par(usr = c(usr[1:2], 0, 1.5) )
h <- hist(x, plot = FALSE)
breaks <- h$breaks; nB <- length(breaks)
y <- h$counts; y <- y/max(y)
rect(breaks[-nB], 0, breaks[-1], y, col = "black", ...)
}
pairs(data,diag.panel = panel.hist, lower.panel = panel.cor)
### Funcion para encontrar los contornos
c_alpha = function(alpha, sigma, p){
res = (2*pi)^(-p/2)*(det(sigma))^(-1/2)*exp(-1/2*qchisq(1-alpha, df = p))
return(res)
}
grafica = function(data, name1, name2){
data_aux = data[c(name1,name2)]
names(data_aux) = c("y1","y2")
cov_data = cov(data_aux)
mean_data = mean=colMeans(data_aux)
min_value1 = min(data[name1])
max_value1 = max(data[name1])
min_value2 = min(data[name2])
max_value2 = max(data[name2])
n = 100
y1 = seq(min_value1, max_value1, length.out = n)
y2 = seq(min_value2, max_value2, length.out = n)
grid = expand.grid(y1,y2)
grid$Z<-apply(grid,1,dmvnorm,mean = mean_data,sigma=cov_data)
Z<-matrix(grid$Z,nrow=n,ncol=n)
contornos = sapply(c(0.01, 0.05, 0.1), c_alpha, sigma = cov_data, 2)
contour(y1,y2,Z,levels=contornos,labels=c("99%","95%","90%"),
las=1)
points(data_aux$y1,data_aux$y2)
grid()
title(main = "Contornos de distribucion normal", xlab = name1, ylab = name2)
}
p1 = grafica(data, "Costo.de.ventas_dif", "PIB")
p2 = grafica(data, "Costo.de.ventas_dif", "TRM")
p3 = grafica(data, "Costo.de.ventas" , "Costo.de.ventas_dif")
p4 = grafica(data, "Gastos.de.ventas" , "Gastos.de.ventas_dif")
p4 = grafica(data, "Costo.de.ventas_dif" , "Gastos.de.ventas_dif")
data_aux = select(all_data,select = -starts_with('NIT'))
data_aux = select(data_aux,select = -starts_with('Year'))
### Transformacion de las variables respuesta
### Recordar para la interpretacion de los modelos:
### regresion log(y) = b*log(x) -> cambio en x, es un aumento en b% en y
### regresion log(y) = b*x -> cambio en x implica un aumento en 100*b puntos en y
### regresion y = b*log(x) -> cambio en x implica un cambio de (b/100)% en y
### regresion y = b*x -> cambio en x implica un aumento de b en y
### Transformacion 1: a nivel logaritmico
data_aux$Costo.de.ventas_dif = log(1 + all_data$Costo.de.ventas_dif)
data_aux$PIB = log(1 + all_data$PIB)
data_aux$TRM = log(1 + all_data$TRM)
data_aux$Desempleo = log(1 + all_data$Desempleo)
data_aux$Balance_CC = log(1 + all_data$Balance_CC)
data_aux$Balance_Fiscal = log(1 + all_data$Balance_Fiscal)
data_aux$Inflacion = log(1 + all_data$Inflacion)
data_aux$Tasa_Intervencion = log(1 + all_data$Tasa_Intervencion)
empresas_train = c(800015615, 800045720,
800081030, 800112440,
800118660, 800157469,
800232356, 800236890,
801002644, 805012368,
806014553, 830030574,
830037495, 860009694,
860033653, 860050956,
890909034, 900173460,
900184722, 900204182,
900364670, 900378893)
empresas_test = c(830052054, 860030360,
860501682, 890117431,
890300012, 890311366,
890904459, 890929951,
900234565, 900389088,
900437650)
train = all_data$NIT%in%empresas_train
test = all_data$NIT%in%empresas_test
NIT_train = NIT[train,]
NIT_test = NIT[test,]
data_train = data_aux[train,]
rownames(data_train) <- NULL
data_train_z = data_train
media_tr = attr(data_train_z, 'scaled:center')
stdev_tr = attr(data_train_z, 'scaled:scale')
data_train_z = as.data.frame(data_train_z)
data_test = data_aux[test,]
rownames(data_test) <- NULL
data_test_z = data_test
data_train_z$NIT = NIT_train
data_test_z$NIT = NIT_test
r2_score <- function(x, y) summary(lm(y~x))$r.squared
adj_r2_score <- function(x, y) summary(lm(y~x))$adj.r.squared
mse_score <- function(x, y) mean((x - y)^2)
step.model <- ols_step_both_p(lm('Costo.de.ventas_dif~PIB+TRM+Desempleo+Inflacion+Tasa_Intervencion+Balance_CC+Balance_Fiscal', data = data_train_z), pent = 0.1, prem = 0.1, details = TRUE)
summary(step.model)
mod_lin = lm('Costo.de.ventas_dif~PIB', data = data_train_z)
summary(mod_lin)
preds = predict(mod_lin)
plot(lapply(preds, function(x) exp(x) - 1),
lapply(data_train_z$Costo.de.ventas_dif, function(x) exp(x) - 1),
xlab = 'Valor predicho', ylab = 'Valor real', main='Modelo Lineal General (a escala porcentual)')
abline(a=0, b=1, lwd = 2, col = 'red')
preds_test = predict(mod_lin, newdata = data_test_z)
r2_model<-r2_score(preds_test, data_test_z$Costo.de.ventas_dif)
adj_r2_model<-adj_r2_score(preds_test, data_test_z$Costo.de.ventas_dif)
mse_model<-mse_score(preds_test, data_test_z$Costo.de.ventas_dif)
sub_tit = paste("R2", format(r2_model, digits=2, nsmall=2),
"; R2_adj", format(adj_r2_model, digits=2, nsmall=2),
"; MSE", format(mse_model, digits=2, nsmall=2),
sep = " ", collapse = NULL)
plot(lapply(preds_test, function(x) exp(x) - 1),
lapply(data_test_z$Costo.de.ventas_dif, function(x) exp(x) - 1),
xlab = 'Valor predicho', ylab = 'Valor Real', main='Modelo Lineal General (a escala porcentual)', sub=sub_tit)
abline(a=0, b=1, lwd = 2, col = 'red')
par(mfrow=c(3,2))
mod_plot = plot(mod_lin, which = c(1:6))
mod_me = lmer('Costo.de.ventas_dif~Desempleo+PIB+(0+Desempleo|NIT)+(PIB|NIT)', data = data_train_z)
summary(mod_me)
preds = predict(mod_me)
plot(lapply(preds, function(x) exp(x) - 1),
lapply(data_train_z$Costo.de.ventas_dif, function(x) exp(x) - 1),
main='Modelo de Efectos Mixtos (a escala porcentual)', xlab = 'Valor predicho', ylab = 'Valor Real')
abline(a=0, b=1, lwd = 2, col = 'red')
preds = predict(mod_me, newdata = data_test_z,allow.new.levels=TRUE)
r2_model<-r2_score(preds, data_test_z$Costo.de.ventas_dif)
adj_r2_model<-adj_r2_score(preds, data_test_z$Costo.de.ventas_dif)
mse_model<-mse_score(preds, data_test_z$Costo.de.ventas_dif)
sub_tit = paste("R2", format(r2_model, digits=2, nsmall=2),
"; R2_adj", format(adj_r2_model, digits=2, nsmall=2),
"; MSE", format(mse_model, digits=2, nsmall=2),
sep = " ", collapse = NULL)
plot(lapply(preds, function(x) exp(x) - 1),
lapply(data_test_z$Costo.de.ventas_dif, function(x) exp(x) - 1),
main='Modelo de Efectos Mixtos (a escala porcentual)', xlab = 'Valor predicho', ylab = 'Valor Real', sub=sub_tit)
abline(a=0, b=1, lwd = 2, col = 'red')
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=(title='Poblacional'))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=list(title='Poblacional'))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout( list(xaxis = list(title = 'PIB')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout( list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo)',zaxis = list(title = 'Costo_de_ventas_dif'))))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo)',zaxis = list(title = 'Costo_de_ventas_dif'))))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### este bloque para el hoverplot
txt <- array(dim=dim(z))
for (x in 0:dim(z)[[2]] - 1) {
for (y in 0:dim(z)[[1]] - 1) {
txt[1 + x*dim(z)[[1]] + y] = paste('PIB: ', x, '<br />Desempleo: ', y, '<br />Costo_de_ventas_dif: ', volcano[1 + x * dim(z)[[1]] + y])}}
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif'))))
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### este bloque para el hoverplot
txt <- array(dim=dim(z))
for (x in 0:dim(z)[[2]] - 1) {
for (y in 0:dim(z)[[1]] - 1) {
txt[1 + x*dim(z)[[1]] + y] = paste('PIB: ', x, '<br />Desempleo: ', y, '<br />Costo_de_ventas_dif: ', volcano[1 + x * dim(z)[[1]] + y])}}
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### este bloque para el hoverplot
txt <- array(dim=dim(z))
for (x in 0:dim(z)[[2]] - 1) {
for (y in 0:dim(z)[[1]] - 1) {
txt[1 + x*dim(z)[[1]] + y] = paste('PIB: ', x, '<br />Desempleo: ', y, '<br />Costo_de_ventas_dif: ', volcano[1 + x * dim(z)[[1]] + y])}}
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z, data=data_surface,text = ~paste("Hour:", dat$x,
"<br> Day:", dat$y,
"<br> z:", dat$z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z, data=data_surface,text = ~paste("Hour:", data_surface$x,
"<br> Day:", data_surface$y,
"<br> z:", data_surface$z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z, data=data_surface,text = ~paste("PIB:", data_surface$x,
"<br> Desempleo:", data_surface$y,
"<br> Costo_de_ventas_dif:", data_surface$z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = empresas_train[1]
z2 = predict(mod_me, newdata = data_surface)
z2 = matrix(z2, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
data_surface$NIT = empresas_train[3]
z3 = predict(mod_me, newdata = data_surface)
z3 = matrix(z3, nrow = 50, ncol = 50)
fig %>% add_surface(z = ~z2, opacity = 0.98,colorscale = list(c(0,1),c("rgb(255,112,184)","rgb(120,0,64)")),colorbar=list(title=paste('NIT ', empresas_train[1]))) %>% add_surface(z = ~z3, opacity = 0.94,colorscale = list(c(0,1),c("rgb(0,0,0)","rgb(200,200,200)")),     colorbar=list( title=paste('NIT ', empresas_train[1]))) %>% layout(title="Poblacional (azul y verde) vs dos Individuos (uno rosa y uno negro)")
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z, hoverinfo = 'text',
text = ~paste('</br> PIB: ', x,
'</br> Desempleo: ', y,
'</br> Costo_de_ventas_dif: ', z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
newmatx = c(PIB, Desempleo, z)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(newmatx, x = ~PIB, y = ~Desempleo, z = ~z, hoverinfo = 'text',
text = ~paste('</br> PIB: ', PIB,
'</br> Desempleo: ', Desempleo,
'</br> Costo_de_ventas_dif: ', z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
newmatx = data.frame(PIB, Desempleo, z)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(newmatx, x = ~PIB, y = ~Desempleo, z = ~z, hoverinfo = 'text',
text = ~paste('</br> PIB: ', PIB,
'</br> Desempleo: ', Desempleo,
'</br> Costo_de_ventas_dif: ', z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
newmatx = data.frame(PIB, Desempleo, z)
newmatx
z
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = PIB, y = Desempleo, z = z, hoverinfo = 'text',
text = ~paste('</br> PIB: ', ~x,
'</br> Desempleo: ', ~y,
'</br> Costo_de_ventas_dif: ', ~z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = ~PIB, y = ~Desempleo, z = ~z, hoverinfo = 'text',
text = ~paste('</br> PIB: ', PIB,
'</br> Desempleo: ', Desempleo,
'</br> Costo_de_ventas_dif: ', z)) %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
custom_txt <- paste0("My X = ", rep(x, times = 50),
"</br> My Y = ", rep(y, each = 50), # correct break syntax
"</br> My Z = ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = ~PIB, y = ~Desempleo, z = ~z,    text = custom_txt,      hoverinfo = "text") %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
custom_txt <- paste0("My X = ", rep(PIB, times = 50),
"</br> My Y = ", rep(Desempleo, each = 50), # correct break syntax
"</br> My Z = ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = ~PIB, y = ~Desempleo, z = ~z,    text = custom_txt,      hoverinfo = "text") %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'PIB'), yaxis = list(title = 'Desempleo'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
View(custom_txt)
View(data_train_z)
z
Desempleo = seq(min(data_train_z$Desempleo),max(data_train_z$Desempleo), length.out = 50)
PIB = seq(min(data_train_z$PIB),max(data_train_z$PIB), length.out = 50)
data_surface = expand.grid(Desempleo,PIB)
names(data_surface) = c('Desempleo','PIB')
data_surface$NIT = 1000
z = predict(mod_me, newdata = data_surface,allow.new.levels=TRUE)
z = matrix(z, nrow = 50, ncol = 50)
custom_txt <- paste0("Desempleo: ", rep(Desempleo, each = 50),
"\nPIB: ", rep(PIB, times = 50), # correct break syntax
"\nCosto_de_ventas_dif: ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
### Toca rotar la figura para poder ver el plano
fig <- plot_ly(x = Desempleo, y = PIB, z = z,    text = custom_txt,      hoverinfo = "text") %>% add_surface(colorbar=list(title='Poblacional'))%>%layout(scene = list(xaxis = list(title = 'Desempleo'), yaxis = list(title = 'PIB'),zaxis = list(title = 'Costo_de_ventas_dif')))
fig
"Desempleo: ", rep(Desempleo, each = 50)
rep(Desempleo, each = 50)
rep(Desempleo, times = 50)
custom_txt[1]
custom_txt[4]
custom_txt[0]
custom_txt[40]
z
custom_txt[40]
custom_txt <- paste0("Desempleo: ", rep(Desempleo, times = 50),
"\nPIB: ", rep(PIB, times = 50), # correct break syntax
"\nCosto_de_ventas_dif: ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
custom_txt[40]
custom_txt[0]
custom_txt[1]
custom_txt[2]
custom_txt[3]
custom_txt[10]
custom_txt <- paste0("Desempleo: ", rep(Desempleo, times = 50),
"\nPIB: ", rep(PIB, times = 50), # correct break syntax
"\nCosto_de_ventas_dif: ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
custom_txt[2]
custom_txt[20]
custom_txt[10]
PIB
Desempleo
<
z
data_surface
custom_txt <- paste0("Desempleo: ", data_surface$Desempleo,
"\nPIB: ", data_surface$PIB, # correct break syntax
"\nCosto_de_ventas_dif: ", z) %>%
custom_txt <- paste0("Desempleo: ", data_surface$Desempleo,
"\nPIB: ", data_surface$PIB, # correct break syntax
"\nCosto_de_ventas_dif: ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
rep(PIB, times = 50)
data_surface$PIB
custom_txt <- paste0("Desempleo: ", data_surface$Desempleo,
"\nPIB: ", rep(PIB, times = 50), # correct break syntax
"\nCosto_de_ventas_dif: ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
custom_txt <- paste0("Desempleo: ", data_surface$Desempleo,
"\nPIB: ", data_surface$Desempleo, # correct break syntax
"\nCosto_de_ventas_dif: ", z) %>%
matrix(50,50) # dim must match plotly's under-the-hood? matrix
setwd("~/Mis_documentos/MaestriaCienciaDatos/Semestre2/PI_2/Github/PI2/scripts/Lme")
##### Mixed effects logistic regression para accidentes
require(lme4)
library(ModelMetrics)
### Leer datos (el working directory debe ser la carpeta donde esta este script)
train_dat = read.csv("../../data/train_z.csv", encoding = "UTF-8")
val_dat = read.csv("../../data/validation_z.csv", encoding = "UTF-8")
test_dat = read.csv("../../data/test_z.csv", encoding = "UTF-8")
### Linear mixed effects model
m <- glmer(Accidente ~ precipIntensity + precipProbability + uvIndex + visibility + hora_0 + hora_1 + hora_2 + hora_3 + hora_4 + hora_5 + hora_7 + hora_11 + hora_13 + hora_15 + hora_16 + hora_17 + hora_18 + hora_19 + hora_20 + hora_22 + hora_23 + icon_clear.day + icon_cloudy + icon_fog + dia_sem_4 + dia_sem_5 + dia_sem_6 + festivo + Mes_Abril + Mes_Agosto + Mes_Enero + Mes_Febrero + Mes_Julio + Mes_Mayo + Mes_Septiembre + Year_2017 + Year_2018 + Year_2019 + cloudCover_mean + precipIntensity_mean + visibility_mean + windSpeed_mean + cloudCover_mean_forward + dewPoint_mean_forward + precipIntensity_mean_forward + temperature_mean_forward + cumAcc_30D +
(1 | BARRIO), data = train_dat, family = binomial(link="logit"), control = glmerControl(optimizer = "bobyqa")
)
summary(m)
### Predicciones validacion
predictio_v = predict(m, newdata=val_dat,type="response")
### Exportar predicciones validacion
valpr = data.frame(predictio_v, val_dat$Accidente)
write.table(valpr, "predicciones_val_r.txt", sep=";")
### Roc auc val
library(pROC)
roc_obj <- roc(val_dat$Accidente, predictio_v)
auc(roc_obj)
### Predicciones test
predictio_t = predict(m, newdata=test_dat,type="response")
### Exportar predicciones test
testpr = data.frame(predictio_t)
write.table(testpr, "predicciones_test_r.txt", sep=";")
